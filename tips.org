* prority queue

*** api just like stack
#+begin_src C++

class Solution {
public:
    priority_queue<int> q;
    int lastStoneWeight(vector<int>& stones) {
        
        for (int i : stones){
            q.push(i);
        }
        
        while(q.size() > 1){
            int x = q.top();
            q.pop();
            
            int y = q.top();
            q.pop();
            
            if (x-y != 0){
                q.push(x-y);
            }
        }
        return q.size() == 1 ? q.top() : 0;
    }
};
#+end_src

* bit manip
** xor
a⊕b⊕a=(a⊕a)⊕b=0⊕b=b

* lower_bound
find items <= something
https://en.cppreference.com/w/cpp/algorithm/lower_bound

** Online classes
grokking the system design interview
https://www.educative.io/courses/grokking-the-system-design-interview
high scalability blog 
** books

